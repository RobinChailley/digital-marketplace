Project:

The main goal of the project is to build the back-end architecture of a digital marketplace.
The project will be written in Golang and must use microservices.

How you separate your microservices is up to you, and you will be evaluated on this.

Your back-end must handle accounts, ads, transactions.

For all the informations bellow you are free to use the architecture that you think will be the best.
For example, if I'm describing an account with it's mandatory informations and mandatory actions, that doesn't mean that you are forced to use a single structure to handle the informations or a single microservices to handle the actions.

+----------+
| Accounts |
+----------+

An account should have at least the following informations (you can add some if needed):
	- email (Must be unique)
	- login (Must be unique)
	- password
	- balance

Your back-end must implement the following actions related to an account (you can add some if needed):
	- [x] Create an account
	- [x] Login
	- [x] Update informations of its own account
	- [x] Delete its own account
	- [x] Fully read its own account
	- [x] Partially read any user account
	- [x] Add funds to it's own balance
	- [x] Retrieve ads from user when get-me

+----_+
| Ads |
+-----+

An ad should be linked to an account

An ad should have at least the following informations (you can add some if needed):
	- title
	- description
	- price
	- picture

Your back-end must implement the following actions related to an ad (you can add some if needed):
	- [x] Create an ad
	- [x] Get a list of all the ads of me
	- [x] Get a list of all the ads of a user
	- [x] Update one of its own ad
	- [x] Delete one of its own ad
	- [x] Read any ad
	- [x] Get a list of ads searching by keywords

	
+--------------+
| Transactions |
+--------------+

A transaction should be linked to two accounts and an ad

A transaction should have at least the following informations (you can add some if needed):
	- messages
	- bid prices
	- status

Your back-end must implement the following actions related to a transaction (you can add some if needed):
	- [x] Make an offer on an ad
	- [x] Accept an offer on its own ad
	- [x] Refuse an offer on its own ad
	- [x] List all its own transaction


+------+
| Hint |
+------+

- [x] Some API requests must be called with an authenticated users, others don't (Be pragmatic).
- [x] You might need to authorize user's on some API requests (Think about access token).
- [x] Some data might be sensible and should not be shared to everyone (One's again, be pragmatic).
- [x] Obviously making an offer and accepting a transaction has several impact on data.
- [x] Think of a way to avoid double spending problem.
- [x] Searching an object in a database based on a subquery string isn't a good idea.
- [x] Micro services needs to communicate between each others but not with the same reliability.

+-------+
| Bonus |
+-------+

Add an admin role. Admin should be able to:
	- [ ] Update / delete any account
	- [ ] Fully read any account
	- [ ] Add / retrieve funds to any account
	- [ ] Delete any ads
	- [ ] Cancel any transaction (think about the consequence of a transaction cancel)
